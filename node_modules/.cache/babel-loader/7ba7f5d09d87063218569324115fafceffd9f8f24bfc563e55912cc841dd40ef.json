{"ast":null,"code":"var _jsxFileName = \"/home/srikar/Desktop/customizable-dashboard/src/DashBoard.js\",\n  _s = $RefreshSig$();\n// Dashboard.js\nimport React, { useEffect } from 'react';\nimport { useDrop } from 'react-dnd';\nimport ImageComponent from './ImageComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  images,\n  setImages\n}) => {\n  _s();\n  const placeholders = 10; // Number of fixed placeholders\n  const containerHeight = 500; // Fixed height for the drop zone\n  const containerWidth = 300; // Fixed width for the container\n\n  // Drop zone setup\n  const [{\n    isOver\n  }, drop] = useDrop(() => ({\n    accept: 'IMAGE',\n    drop: item => handleDrop(item),\n    collect: monitor => ({\n      isOver: !!monitor.isOver()\n    })\n  }));\n  const handleDrop = item => {\n    const newImages = [...images, item];\n    setImages(newImages);\n  };\n  useEffect(() => {\n    // Save configuration to localStorage\n    localStorage.setItem('dashboardConfig', JSON.stringify(images));\n  }, [images]);\n  const containerStyle = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(50%, 1fr))',\n    // Two columns, adjusting to available space\n    gap: '8px',\n    // Adjust gap as needed\n    gridAutoRows: 'minmax(50px, auto)',\n    // Minimum row height of 50px, adjusting to content\n    height: `${containerHeight}px`,\n    // Fixed height for the drop zone\n    width: `${containerWidth}px`,\n    // Fixed width for the container\n    margin: '0 auto' // Center the container horizontally\n  };\n  const imageStyle = {\n    width: '100%',\n    height: 'auto',\n    maxHeight: '100%' // Ensure images don't exceed their natural height\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    ref: drop,\n    className: \"dashboard\",\n    children: [[...Array(placeholders)].map((_, index) => /*#__PURE__*/_jsxDEV(ImageComponent, {\n      imageUrl: null,\n      altText: `Placeholder ${index + 1}`,\n      style: imageStyle\n    }, `placeholder-${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)), images.map((image, index) => /*#__PURE__*/_jsxDEV(ImageComponent, {\n      imageUrl: image.imageUrl,\n      altText: image.altText,\n      style: imageStyle\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Dashboard, \"qnG+gXTNke131kmDyW2upLFTY5U=\", false, function () {\n  return [useDrop];\n});\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useDrop","ImageComponent","jsxDEV","_jsxDEV","Dashboard","images","setImages","_s","placeholders","containerHeight","containerWidth","isOver","drop","accept","item","handleDrop","collect","monitor","newImages","localStorage","setItem","JSON","stringify","containerStyle","display","gridTemplateColumns","gap","gridAutoRows","height","width","margin","imageStyle","maxHeight","style","ref","className","children","Array","map","_","index","imageUrl","altText","fileName","_jsxFileName","lineNumber","columnNumber","image","_c","$RefreshReg$"],"sources":["/home/srikar/Desktop/customizable-dashboard/src/DashBoard.js"],"sourcesContent":["// Dashboard.js\nimport React, { useEffect } from 'react';\nimport { useDrop } from 'react-dnd';\nimport ImageComponent from './ImageComponent';\n\nconst Dashboard = ({ images, setImages }) => {\n  const placeholders = 10; // Number of fixed placeholders\n  const containerHeight = 500; // Fixed height for the drop zone\n  const containerWidth = 300; // Fixed width for the container\n\n  // Drop zone setup\n  const [{ isOver }, drop] = useDrop(() => ({\n    accept: 'IMAGE',\n    drop: (item) => handleDrop(item),\n    collect: (monitor) => ({\n      isOver: !!monitor.isOver(),\n    }),\n  }));\n\n  const handleDrop = (item) => {\n    const newImages = [...images, item];\n    setImages(newImages);\n  };\n\n  useEffect(() => {\n    // Save configuration to localStorage\n    localStorage.setItem('dashboardConfig', JSON.stringify(images));\n  }, [images]);\n\n  const containerStyle = {\n    display: 'grid',\n    gridTemplateColumns: 'repeat(auto-fill, minmax(50%, 1fr))', // Two columns, adjusting to available space\n    gap: '8px', // Adjust gap as needed\n    gridAutoRows: 'minmax(50px, auto)', // Minimum row height of 50px, adjusting to content\n    height: `${containerHeight}px`, // Fixed height for the drop zone\n    width: `${containerWidth}px`, // Fixed width for the container\n    margin: '0 auto', // Center the container horizontally\n  };\n\n  const imageStyle = {\n    width: '100%',\n    height: 'auto',\n    maxHeight: '100%', // Ensure images don't exceed their natural height\n  };\n\n  return (\n    <div style={containerStyle} ref={drop} className=\"dashboard\">\n      {/* Generate placeholders */}\n      {[...Array(placeholders)].map((_, index) => (\n        <ImageComponent key={`placeholder-${index}`} imageUrl={null} altText={`Placeholder ${index + 1}`} style={imageStyle} />\n      ))}\n      {/* Display uploaded images */}\n      {images.map((image, index) => (\n        <ImageComponent key={index} imageUrl={image.imageUrl} altText={image.altText} style={imageStyle} />\n      ))}\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}